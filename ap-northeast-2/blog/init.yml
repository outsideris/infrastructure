---
- hosts: blog
  vars:
    mysql_password: YOUR_PASSWORD
    mysql_root_password: YOUR_ROOT_PASSWORD
    domain_name: blog.outsider.ne.kr

  tasks:
  - name: ping
    ping:

  - name: add php repository
    apt_repository:
      repo: ppa:ondrej/php
    become: true

  - name: install packages
    apt:
      pkg:
        - git
        - curl
        - mcrypt
        - zlib1g-dev
        - libpcre3
        - libpcre3-dev
        - libssl-dev
        - libgd-dev
        - libgeoip-dev
        - libxslt1-dev
        - mysql-client
        - mysql-common
        - mysql-server
        - libmysqlclient-dev
        - python-mysqldb
        - php5.6-cli
        - php5.6-fpm
        - php5.6-mysql
        - php5.6-xml
      update_cache: yes
    become: true

  # Node.js
  - name: add nodesource deb
    shell: curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
    args:
      warn: false

  - name: install nodejs 10
    apt:
      pkg:
        - nodejs
      update_cache: yes
    become: true

  # nginx
  - name: check if nginx installed
    stat:
      path: /usr/sbin/nginx
    register: nginx_bin

  - name: install nginx with pagespeed
    shell: >
      bash <(curl -f -L -sS https://ngxpagespeed.com/install) -y
      --nginx-version latest
      --additional-nginx-configure-arguments
      '--with-cc-opt="-g -O2 -fdebug-prefix-map=/build/nginx-FIJPpj/nginx-1.14.0=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2"
      --with-ld-opt="-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -fPIC"
      --prefix=/usr/share/nginx
      --sbin-path=/usr/sbin/nginx
      --conf-path=/etc/nginx/nginx.conf
      --http-log-path=/var/log/nginx/access.log
      --error-log-path=/var/log/nginx/error.log
      --lock-path=/var/lock/nginx.lock
      --pid-path=/run/nginx.pid
      --modules-path=/usr/lib/nginx/modules
      --http-client-body-temp-path=/var/lib/nginx/body
      --http-fastcgi-temp-path=/var/lib/nginx/fastcgi
      --http-proxy-temp-path=/var/lib/nginx/proxy
      --http-scgi-temp-path=/var/lib/nginx/scgi
      --http-uwsgi-temp-path=/var/lib/nginx/uwsgi
      --with-pcre-jit
      --with-http_ssl_module
      --with-http_stub_status_module
      --with-http_realip_module
      --with-http_auth_request_module
      --with-http_v2_module
      --with-http_dav_module
      --with-http_slice_module
      --with-threads
      --with-http_addition_module
      --with-http_geoip_module=dynamic
      --with-http_gunzip_module
      --with-http_gzip_static_module
      --with-http_image_filter_module=dynamic
      --with-http_sub_module
      --with-http_xslt_module=dynamic
      --with-stream=dynamic
      --with-stream_ssl_module
      --with-mail=dynamic
      --with-mail_ssl_module'
    args:
      executable: /bin/bash
    when: nginx_bin.stat.exists == False
    become: true

  - name: install nginx init script
    template:
      src: ./templates/nginx.init
      dest: /etc/init.d/nginx
      owner: root
      group: root
      mode: 0755
    become: yes

  - name: creates directory for nginx
    file:
      path: "{{item}}"
      state: directory
      mode: 0755
      group: root
      owner: root
    with_items:
      - /var/lib/nginx
      - /etc/nginx/modules-enabled
      - /etc/nginx/conf.d
      - /etc/nginx/sites-enabled
    become: yes

  - name: register nginx service
    template:
      src: ./templates/nginx.service
      dest: /lib/systemd/system/nginx.service
      owner: root
      group: root
      mode: 0755
    become: yes

  - name: start nginx
    service:
      name: nginx
      state: started
    become: true

  - name: remove default nginx config
    file: name=/etc/nginx/sites-enabled/default state=absent
    become: true

  - name: add nginx configurations
    copy:
      src: ./templates/nginx.conf.j2
      dest: /etc/nginx/nginx.conf
      owner: root
      group: root
      mode: 0644
    become: true

  - name: add nginx blog configurations
    template:
      src: ./templates/blog.conf.j2
      dest: /etc/nginx/sites-enabled/blog.conf
      owner: root
      group: root
      mode: 0644
    become: true

  - name: creates directory for .well-known
    file:
      path: "{{item}}"
      state: directory
      mode: 0775
      group: ubuntu
      owner: ubuntu
    with_items:
      - /home/ubuntu/www/well-known/.well-known
    become: true

  - name: add keybase
    copy:
      src: ./templates/keybase.txt
      dest: /home/ubuntu/www/well-known/.well-known/keybase.txt
      owner: ubuntu
      group: ubuntu
      mode: 0644

  # MySQL
  - name: MySQL | start the MySQL service
    action: service name=mysql state=started

  - name: MySQL | remove the test database
    mysql_db:
      name: test
      state: absent
      login_user: root
      login_password: "{{mysql_root_password}}"
    become: true

  - name: MySQL | create a new database with name 'blog'
    mysql_db:
      name: blog
      state: present
      login_user: root
      login_password: "{{mysql_root_password}}"
    become: true

  - name: MySQL | create user for blog database
    mysql_user:
      user: outsider
      host: "%"
      password: "{{mysql_password}}"
      priv: blog.*:ALL,GRANT
      login_user: root
      login_password: "{{mysql_root_password}}"
    become: true

  - name: MySQL | ensure anonymous users are not in the database
    mysql_user:
      user: ""
      host: "{{item}}"
      state: absent
      login_user: root
      login_password: "{{mysql_root_password}}"
    with_items:
      - 127.0.0.1
      - ::1
      - localhost
    become: true

  - name: MySQL | create MySQL configuration file
    template:
      src: ./templates/my.cnf.j2
      dest: /etc/mysql/mysql.conf.d/mysqld.cnf
      backup: yes
      owner: root
      group: root
      mode: 0600
    become: true

  - name: MySQL | update mysql root password for all root accounts
    mysql_user:
      name: root
      host: "{{item}}"
      password: "{{mysql_root_password}}"
      login_user: root
      login_password: "{{mysql_root_password}}"
    with_items:
      - 127.0.0.1
      - ::1
      - localhost
    become: true

  - name: MySQL | check sql dump file
    local_action: stat path=./temp/blog.sql
    register: dumpfile

  - name: MySQL | upload sql dump file
    copy:
      src: ./temp/blog.sql
      dest: /tmp/{{ansible_date_time.epoch}}.sql
      owner: ubuntu
      group: ubuntu

  - name: MySQL | check uploaded dump file
    stat:
      path: /tmp/{{ansible_date_time.epoch}}.sql
    register: server_dumpfile

  - name: MySQL | restore database
    mysql_db:
      name: blog
      state: import
      target: /tmp/{{ansible_date_time.epoch}}.sql
      login_user: outsider
      login_password: "{{mysql_password}}"
    when: server_dumpfile.stat.exists == True
    become: true

  - name: add github ssh key
    copy:
      src: ~/.ssh/id_rsa
      dest: /home/ubuntu/.ssh/id_rsa
      owner: ubuntu
      group: ubuntu
      mode: 0600

  - name: clone blog
    git:
      repo: git@github.com:outsideris/blog.git
      dest: /home/ubuntu/www/blog
      accept_hostkey: yes

  - name: add .gitconfig
    copy:
      src: ./templates/gitconfig
      dest: /home/ubuntu/.gitconfig
      owner: ubuntu
      group: ubuntu
      mode: 0644

  - name: set permissions for blog
    file: path=/home/ubuntu/www/blog mode=0777 state=directory

  - name: set permissions for blog skin
    file: path=/home/ubuntu/www/blog/skin/blog mode=0777 state=directory

  - name: set permissions for .htaccess
    file: path=/home/ubuntu/www/blog/.htaccess mode=0666 state=file

  - name: set permissions for attach directory
    file: path=/home/ubuntu/www/blog/attach/1 mode=0777 state=directory

  - name: creates directory for textcube
    file:
      path: "{{item}}"
      state: directory
      mode: 0777
      group: staff
      owner: ubuntu
    with_items:
      - /home/ubuntu/www/blog/cache
    become: true

  - name: create a cron to backup
    cron:
      name: weekly backup
      user: root
      minute: 0
      hour: 20
      weekday: 6
      job: "/home/ubuntu/www/blog/scripts/backup.sh"
    become: true

  - name: remove default nginx config
    file: name=/etc/nginx/sites-enabled/default state=absent
    become: true

  - name: restart php-fpm
    service: name=php5.6-fpm state=restarted
    become: true

  - name: reload nginx
    service: name=nginx state=restarted
    become: true

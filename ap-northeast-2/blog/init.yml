---
- hosts: blog
  vars:
    mysql_password: YOUR_PASSWORD
    mysql_root_password: YOUR_ROOT_PASSWORD
    domain_name: blog.outsider.ne.kr

  tasks:
  - name: ping
    ping:

  - name: add php repository
    apt_repository:
      repo: ppa:ondrej/php
    become: true

  - name: install packages
    apt:
      pkg:
        - curl
        - mcrypt
        - build-essential
        - libssl-dev
        - libgeoip-dev
        - libxslt1-dev
        - gnupg2
        - ca-certificates
        - lsb-release
        - ubuntu-keyring
        - php5.6
        - php5.6-common
        - php5.6-cli
        - php5.6-fpm
        - php5.6-mysql
        - php5.6-xml
        - nodejs
        - python3-pip
        - pkg-config
        - python3-pymysql
      update_cache: yes
    become: true

  # nginx
  - name: Install nginx GPG key
    become: true
    shell: "wget -O- https://nginx.org/keys/nginx_signing.key | gpg --dearmor | tee /etc/apt/trusted.gpg.d/nginx.gpg > /dev/null"
    args:
      creates: "/etc/apt/trusted.gpg.d/nginx.gpg"

  - name: creates directory for nginx gpg
    file:
      path: "{{item}}"
      state: directory
      mode: 0600
      group: root
      owner: root
    with_items:
      - /root/.gnupg
    become: yes

  - name: Add nginx repo
    become: true
    shell: "echo \"deb http://nginx.org/packages/ubuntu `lsb_release -cs` nginx\" | tee /etc/apt/sources.list.d/nginx.list"
    args:
      creates: "/etc/apt/sources.list.d/nginx.list"

  - name: add packages
    apt:
      pkg:
        - nginx
      update_cache: yes
    become: true

  - name: install nginx init script
    template:
      src: ./templates/nginx.init
      dest: /etc/init.d/nginx
      owner: root
      group: root
      mode: 0755
    become: yes

  - name: creates directory for nginx
    file:
      path: "{{item}}"
      state: directory
      mode: 0755
      group: root
      owner: root
    with_items:
      - /var/lib/nginx
      - /etc/nginx/modules-enabled
      - /etc/nginx/conf.d
      - /etc/nginx/sites-enabled
    become: yes

  - name: register nginx service
    template:
      src: ./templates/nginx.service
      dest: /lib/systemd/system/nginx.service
      owner: root
      group: root
      mode: 0755
    become: yes

  - name: start nginx
    service:
      name: nginx
      state: started
    become: true

  - name: remove default nginx config
    file: name=/etc/nginx/sites-enabled/default state=absent
    become: true

  - name: add nginx configurations
    copy:
      src: ./templates/nginx.conf.j2
      dest: /etc/nginx/nginx.conf
      owner: root
      group: root
      mode: 0644
    become: true

  - name: add nginx blog configurations
    template:
      src: ./templates/blog.conf.j2
      dest: /etc/nginx/sites-enabled/blog.conf
      owner: root
      group: root
      mode: 0644
    become: true

  - name: creates directory for .well-known
    file:
      path: "{{item}}"
      state: directory
      mode: 0775
      group: ubuntu
      owner: ubuntu
    with_items:
      - /home/ubuntu/www/well-known/.well-known
    become: true

  - name: add keybase
    copy:
      src: ./templates/keybase.txt
      dest: /home/ubuntu/www/well-known/.well-known/keybase.txt
      owner: ubuntu
      group: ubuntu
      mode: 0644

  # MySQL
  - name: Install Mysql GPG key
    shell: "gpg --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29"
    become: true

  - name: Install Mysql GPG key
    shell: "gpg --export --armor 467B942D3A79BD29 | gpg --dearmour -o /etc/apt/trusted.gpg.d/mysql.5.7-key.gpg"
    args:
      creates: "/etc/apt/trusted.gpg.d/mysql.5.7-key.gpg"
    become: true

  - name: Add Mysql deb repository
    shell: echo "deb http://repo.mysql.com/apt/ubuntu/ bionic mysql-5.7" | sudo tee /etc/apt/sources.list.d/mysql.list
    args:
      creates: "/etc/apt/sources.list.d/mysql.list"
    become: true

  - name: install packages
    apt:
      pkg:
        - libmysqlclient-dev
      update_cache: yes
    become: true

  - name: install MySQL community client
    shell: apt install -fy mysql-community-client=5.7.42-1ubuntu18.04
    become: true

  - name: install MySQL client
    shell: apt install -fy mysql-client=5.7.42-1ubuntu18.04
    become: true

  - name: Install MySQL Server
    apt:
      pkg:
        - mysql-community-server
      update_cache: yes
      state: present
    become: true

  - name: MySQL | start the MySQL service
    action: service name=mysql state=started

  - name: Install PyMySQL
    pip:
      name: pymysql
      state: present

  - name: Install mysqlclient
    pip:
      name: mysqlclient
      state: present

  - name: MySQL | remove the test database
    mysql_db:
      name: test
      state: absent
      login_user: root
      login_password: "{{mysql_root_password}}"
      login_host: localhost
      login_unix_socket: /var/run/mysqld/mysqld.sock
    become: true

  - name: MySQL | create a new database with name 'blog'
    mysql_db:
      name: blog
      state: present
      login_user: root
      login_host: localhost
      login_password: "{{mysql_root_password}}"
      login_unix_socket: /var/run/mysqld/mysqld.sock
    become: true

  - name: MySQL | create user for blog database
    mysql_user:
      user: outsider
      host: "%"
      password: "{{mysql_password}}"
      priv: blog.*:ALL,GRANT
      login_user: root
      login_host: localhost
      login_password: "{{mysql_root_password}}"
      login_unix_socket: /var/run/mysqld/mysqld.sock
    become: true

  - name: MySQL | ensure anonymous users are not in the database
    mysql_user:
      user: ""
      host: "{{item}}"
      state: absent
      login_user: root
      login_host: localhost
      login_password: "{{mysql_root_password}}"
      login_unix_socket: /var/run/mysqld/mysqld.sock
    with_items:
      - 127.0.0.1
      - ::1
      - localhost
    become: true

  - name: MySQL | create MySQL configuration file
    template:
      src: ./templates/my.cnf.j2
      dest: /etc/mysql/mysql.conf.d/mysqld.cnf
      backup: yes
      owner: root
      group: root
      mode: 0600
    become: true

  - name: MySQL | update mysql root password for all root accounts
    mysql_user:
      name: root
      host: "{{item}}"
      password: "{{mysql_root_password}}"
      login_user: root
      login_host: localhost
      login_password: "{{mysql_root_password}}"
      login_unix_socket: /var/run/mysqld/mysqld.sock
    with_items:
      - 127.0.0.1
      - ::1
      - localhost
    become: true

  - name: MySQL | check sql dump file
    local_action: stat path=./temp/blog.sql
    register: dumpfile

  - name: MySQL | upload sql dump file
    copy:
      src: ./temp/blog.sql
      dest: /tmp/{{ansible_date_time.epoch}}.sql
      owner: ubuntu
      group: ubuntu

  - name: MySQL | check uploaded dump file
    stat:
      path: /tmp/{{ansible_date_time.epoch}}.sql
    register: server_dumpfile

  - name: MySQL | restore database
    mysql_db:
      name: blog
      state: import
      target: /tmp/{{ansible_date_time.epoch}}.sql
      login_user: outsider
      login_password: "{{mysql_password}}"
      login_host: localhost
      login_unix_socket: /var/run/mysqld/mysqld.sock
    when: server_dumpfile.stat.exists == True
    become: true

  - name: add github ssh key
    copy:
      src: ~/.ssh/id_rsa
      dest: /home/ubuntu/.ssh/id_rsa
      owner: ubuntu
      group: ubuntu
      mode: 0600

  - name: clone blog
    git:
      repo: git@github.com:outsideris/blog.git
      dest: /home/ubuntu/www/blog
      accept_hostkey: yes

  - name: add .gitconfig
    copy:
      src: ./templates/gitconfig
      dest: /home/ubuntu/.gitconfig
      owner: ubuntu
      group: ubuntu
      mode: 0644

  - name: set permissions for .htaccess
    file: path=/home/ubuntu/www/blog/.htaccess mode=0666 state=file

  - name: create a cron to backup
    cron:
      name: weekly backup
      user: root
      minute: 0
      hour: 20
      weekday: 6
      job: "/home/ubuntu/www/blog/scripts/backup.sh"
    become: true

  - name: remove default nginx config
    file: name=/etc/nginx/sites-enabled/default state=absent
    become: true

  - name: PHP | upload www.conf file
    copy:
      src: ./templates/php-fpm-www.conf
      dest: /etc/php/5.6/fpm/pool.d/www.conf
      owner: root
      group: root
    become: true

  - name: restart php-fpm
    service: name=php5.6-fpm state=restarted
    become: true

  - name: reload nginx
    service: name=nginx state=restarted
    become: true
